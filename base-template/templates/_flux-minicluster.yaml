{{- define "base-template.flux-minicluster" -}}
{{- $monitor := or .Values.monitor.programs .Values.monitor.multiple false -}}
{{ if $monitor }}apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: &name install-headers
  labels:
    app: *name
spec:
  selector:
    matchLabels:
      app: *name
  template:
    metadata:
      labels:
        app: *name{{ if .Values.monitor.label }}{{- range $key, $value := .Values.monitor.label }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}{{ end }}
      {{ if .Values.monitor.annotation }}annotations: {{- range $key, $value := .Values.monitor.annotation }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}{{ end }}
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - image: {{ default "ghcr.io/converged-computing/kernel-header-installer:ubuntu2204" .Values.monitor.installer }}
        name: header-installer
        imagePullPolicy: Always
        command: ["/bin/bash", "/entrypoint.sh"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: modules
          mountPath: /lib/modules
        - name: shared
          mountPath: /opt/shared
      volumes:
      - name: modules
        hostPath:
          path: /lib/modules
      - name: shared
        hostPath:
          path: /opt/shared
          type: DirectoryOrCreate
{{ end }}
---
{{- $privileged := .Values.minicluster.privileged -}}{{ if $monitor }}{{- $privileged = true -}}{{ end }}
apiVersion: flux-framework.org/v1alpha2
kind: MiniCluster
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "chart.labels" . | nindent 4 -}}
    {{ if .Values.label }}{{- range $key, $value := .Values.label }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}{{ end }}
  {{ if .Values.annotation }}annotations: {{- range $key, $value := .Values.annotation }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}{{ end }}

spec:
  size: {{ default 1 .Values.minicluster.size }}
  {{ if .Values.minicluster.interactive }}interactive: true {{ end }}
  {{ if $monitor }}shareProcessNamespace: true{{ end }}
  logging:
    quiet: {{ if .Values.logging.quiet }}true{{ else }}false{{ end }}

  pod:
  {{ if .Values.minicluster.serviceAccountName }}  serviceAccountName: {{  .Values.minicluster.serviceAccountName }}{{ end }}
  {{ if .Values.podLabel }}  labels: {{- range $key, $value := .Values.podLabel }}
      {{ $key }}: {{ $value | quote }}
  {{- end }}{{ end }}
  {{ if .Values.podAnnotation }}  annotations: {{- range $key, $value := .Values.podAnnotation }}
      {{ $key }}: {{ $value | quote }}
  {{- end }}{{ end }}

  flux:
    container:
      disable: {{ if .Values.minicluster.addFlux }}false{{ else }}true{{ end }}
      {{ if .Values.flux }}{{ if .Values.flux.image }}image: {{ .Values.flux.image }}{{ end }}{{ end }}
  containers:
{{ include "chart.monitor" . }}
  - image: "{{ default "ghcr.io/converged-computing/metric-lammps-cpu:zen4-reax" .Values.minicluster.image }}"
    name: app
    command: /bin/bash /tmp/run_${app}.sh
    volumes:
      # Ensure /dev/shm does not limit efa
      shared-memory:
        emptyDir: true
        emptyDirMedium: "memory"
      {{ if .Values.minicluster.volumeName }}{{ .Values.minicluster.volumeName }}:
        path: {{ default "/shared" .Values.minicluster.volumePath }}
        {{ if .Values.minicluster.volumeClaim }}claimName: {{ .Values.minicluster.volumeClaim }}{{ end }}
    {{ end }}
    {{ if .Values.minicluster.workdir }}workingDir: {{ .Values.minicluster.workdir }}{{ end }}
    {{ if .Values.minicluster.pullAlways }}pullAlways: true{{ end }}
    launcher: true
    runFlux: true
    securityContext:
      privileged: {{ if $privileged }}true{{ else }}false{{ end }}
      addCapabilities: [{{ if $monitor }}SYS_ADMIN{{ end }}{{ if .Values.minicluster.addCapabilities }}{{ .Values.minicluster.addCapabilities }}{{ end }}]
    resources:
      limits:
        nvidia.com/gpu: "{{ default 0  .Values.minicluster.gpus }}"
        vpc.amazonaws.com/efa: "{{ default 0  .Values.minicluster.efa }}"
    commands:
      {{ if .Values.minicluster.commands_broker_pre }}brokerPre: {{ .Values.minicluster.commands_broker_pre }}{{ end }}
      init: |
        {{ include "chart.fluxinit" . }}
      post: |
         {{ if $monitor }}{{ include "chart.monitor_finish" . }}{{ end }}
         {{ include "chart.fluxfinish" . }}
      pre: |
         echo "ulimit -l unlimited" >> /root/.bashrc
         {{ if .Values.minicluster.gpus }}{{ include "chart.gpus" . }}{{ end }}
         cat <<EOF >> /tmp/run_${app}.sh
         #!/bin/bash
         set -euo pipefail
         flux resource list
         {{ if $monitor }}{{ include "chart.monitor_start" . }}{{ end }}
         {{ if .Values.experiment.pairs }}{{ include "chart.fluxpairs" . }}
         {{ else if .Values.experiment.foreach }}{{ include "chart.foreach" . }}
         {{ else }}{{ include "chart.fluxrun" . }}{{ end }}
         {{ include "chart.fluxpost" . }}
         {{ include "chart.savelogs" . }}
         EOF
         cat /tmp/run_${app}.sh
{{ end }}
